import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";
import { jsPDF } from "npm:jspdf@2.5.1";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface PDFRequest {
  applicationId: string;
}

// Helpers
function na(value: unknown): string {
  if (value === null || value === undefined || value === "") return "N/A";
  return String(value);
}

function formatCurrencyNaira(amount: number | string | null | undefined): string {
  if (amount === null || amount === undefined) return "N/A";
  const num = typeof amount === "string" ? Number(amount) : amount;
  if (Number.isNaN(num)) return "N/A";
  return `â‚¦${num.toLocaleString("en-NG")}`;
}

serve(async (req) => {
  // CORS preflight
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const SUPABASE_URL = Deno.env.get("SUPABASE_URL") ?? "";
    const SERVICE_ROLE = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? "";

    if (!SUPABASE_URL || !SERVICE_ROLE) {
      throw new Error("Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY in environment");
    }

    const supabase = createClient(SUPABASE_URL, SERVICE_ROLE);

    const { applicationId }: PDFRequest = await req.json();
    if (!applicationId) {
      return new Response(JSON.stringify({ error: "applicationId is required" }), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    console.log(`[generate-application-pdf] Start for applicationId=${applicationId}`);

    // 1) Fetch Application (no relationship expansion)
    const { data: application, error: appError } = await supabase
      .from("applications")
      .select("*")
      .eq("id", applicationId)
      .maybeSingle();

    if (appError) {
      console.error("Application fetch error:", appError);
      throw new Error(`Failed to fetch application: ${appError.message}`);
    }
    if (!application) {
      throw new Error("Application not found");
    }

    // 2) Fetch related Property
    let property: { title?: string; price?: number; bedrooms?: number; bathrooms?: number } | null = null;
    if (application.property_id) {
      const { data: propertyRow, error: propertyError } = await supabase
        .from("properties")
        .select("title, price, bedrooms, bathrooms")
        .eq("id", application.property_id)
        .maybeSingle();
      if (propertyError) {
        console.warn("Property fetch error (continuing without it):", propertyError);
      }
      property = propertyRow ?? null;
    }

    // 3) Fetch related Estate
    let estate: { name?: string; location?: string } | null = null;
    if (application.estate_id) {
      const { data: estateRow, error: estateError } = await supabase
        .from("estates")
        .select("name, location")
        .eq("id", application.estate_id)
        .maybeSingle();
      if (estateError) {
        console.warn("Estate fetch error (continuing without it):", estateError);
      }
      estate = estateRow ?? null;
    }

    // 4) Build the PDF
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const marginX = 20;
    let y = 20;

    // Header
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text("PROPERTY APPLICATION FORM", pageWidth / 2, y, { align: "center" });
    y += 6;
    doc.setFontSize(11);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(100);
    doc.text("Generated by EHEF Mortgage", pageWidth / 2, y, { align: "center" });
    doc.setTextColor(0);
    y += 10;
    doc.setDrawColor(200, 200, 200);
    doc.line(marginX, y, pageWidth - marginX, y);
    y += 8;

    const section = (title: string) => {
      doc.setFont("helvetica", "bold");
      doc.setFontSize(14);
      doc.setTextColor(30, 30, 30);
      doc.text(title, marginX, y);
      y += 5;
      doc.setDrawColor(50, 50, 50);
      doc.setLineWidth(0.2);
      doc.line(marginX, y, pageWidth - marginX, y);
      y += 6;
      doc.setFont("helvetica", "normal");
      doc.setFontSize(11);
      doc.setTextColor(0);
    };

    const line = (label: string, value: string) => {
      const labelWidth = 45;
      const xValue = marginX + labelWidth;
      doc.setFont("helvetica", "bold");
      doc.text(`${label}:`, marginX, y);
      doc.setFont("helvetica", "normal");
      doc.text(value || "N/A", xValue, y);
      y += 6;
    };

    // Property Information
    section("Property Information");
    line("Estate", na(estate?.name));
    line("Location", na(estate?.location));
    line("Property", na(property?.title));
    line("Bedrooms", na(property?.bedrooms));
    line("Bathrooms", na(property?.bathrooms));
    line("Price", formatCurrencyNaira(property?.price as number));
    y += 4;

    // Applicant Information
    section("Applicant Information");
    line("Full Name", `${na(application.first_name)} ${na(application.last_name)}`);
    line("Email", na(application.email));
    line("Phone", na(application.phone));
    line("Address", na(application.address));
    line("Occupation", na(application.occupation));
    line("Employer", na(application.employer));
    line("Monthly Income", formatCurrencyNaira(application.monthly_income));
    y += 4;

    // Next of Kin
    section("Next of Kin");
    line("Name", na(application.next_of_kin_name));
    line("Relationship", na(application.next_of_kin_relationship));
    line("Phone", na(application.next_of_kin_phone));
    line("Address", na(application.next_of_kin_address));
    y += 4;

    // Selection Details
    if (application.selected_house || application.selected_street) {
      section("Selection Details");
      if (application.selected_house) line("Selected House", na(application.selected_house));
      if (application.selected_street) line("Selected Street", na(application.selected_street));
      y += 2;
    }

    // Payment Information
    section("Payment Information");
    const paymentPlanLabel =
      application.payment_plan === "installment_6"
        ? "Installment (6 months)"
        : na(String(application.payment_plan || "").replace("_", " "));
    line("Payment Plan", paymentPlanLabel);
    line("Total Amount", formatCurrencyNaira(application.total_amount));
    y += 4;

    // Terms
    section("Terms & Conditions");
    line("Terms Accepted", application.terms_accepted ? "Yes" : "No");
    if (application.terms_accepted_at) {
      line("Accepted Date", new Date(application.terms_accepted_at).toLocaleString());
    }
    y += 4;

    // Footer
    doc.setFontSize(9);
    doc.setTextColor(100);
    doc.text(`Application ID: ${application.id}`, marginX, y);
    y += 5;
    doc.text(`Submitted on: ${new Date(application.created_at).toLocaleString()}`, marginX, y);
    doc.setTextColor(0);

    // 5) Upload to Storage
    const pdfBuffer = doc.output("arraybuffer");
    const fileName = `application_${applicationId}_${Date.now()}.pdf`;

    const { error: uploadError } = await supabase.storage
      .from("documents")
      .upload(fileName, pdfBuffer, { contentType: "application/pdf" });

    if (uploadError) {
      console.error("Storage upload error:", uploadError);
      throw new Error(`Failed to upload PDF: ${uploadError.message}`);
    }

    // 6) Public URL and update application
    const { data: publicData } = supabase.storage
      .from("documents")
      .getPublicUrl(fileName);
    const publicUrl = publicData?.publicUrl;

    if (!publicUrl) {
      throw new Error("Could not get public URL for uploaded PDF");
    }

    const { error: updateError } = await supabase
      .from("applications")
      .update({ application_pdf_url: publicUrl })
      .eq("id", applicationId);

    if (updateError) {
      console.error("Application update error:", updateError);
      throw new Error(`Failed to update application with PDF URL: ${updateError.message}`);
    }

    console.log("[generate-application-pdf] Success", { applicationId, fileName, publicUrl });

    return new Response(JSON.stringify({ success: true, pdfUrl: publicUrl, fileName }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error: any) {
    console.error("Error in generate-application-pdf:", error);
    return new Response(JSON.stringify({ error: error.message ?? "Unknown error" }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});
